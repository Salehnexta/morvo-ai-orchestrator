import React, { useState, useRef, useEffect } from 'react';
import { MessageList } from './chat/MessageList';
import { ChatInput } from './chat/ChatInput';
import { ChatHeader } from './chat/ChatHeader';
import { ActionButtons } from './chat/ActionButtons';
import { useAuth } from '@/contexts/AuthContext';
import { useLanguage } from '@/contexts/LanguageContext';
import { useTheme } from '@/contexts/ThemeContext';
import { useJourney } from '@/contexts/JourneyContext';
import { useToast } from '@/hooks/use-toast';
import { useAdvancedConversation } from '@/hooks/useAdvancedConversation';
import { SmartResponseGenerator } from '@/services/smartResponseGenerator';
import { MorvoAIService } from '@/services/morvoAIService';
import { AgentResponse } from '@/services/agent';

interface MessageData {
  id: string;
  content: string;
  sender: 'user' | 'agent';
  timestamp: Date;
  processing_time?: number;
  tokens_used?: number;
  suggested_actions?: Array<{
    action: string;
    label: string;
    priority: number;
  }>;
  personality_traits?: any;
  isOnboarding?: boolean;
  contextualInsights?: string[];
  emotionalContext?: any;
  journeyPhase?: string;
}

interface ChatInterfaceProps {
  onContentTypeChange?: (type: string) => void;
}

export const ChatInterface: React.FC<ChatInterfaceProps> = ({ 
  onContentTypeChange
}) => {
  const [messages, setMessages] = useState<MessageData[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionChecked, setConnectionChecked] = useState(false);
  const [chatInitialized, setChatInitialized] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const { user } = useAuth();
  const { language, isRTL } = useLanguage();
  const { theme } = useTheme();
  const { toast } = useToast();
  const { 
    journey, 
    journeyStatus, 
    isOnboardingComplete, 
    currentPhase,
    setGreeting,
    analyzeWebsite,
    saveAnswer,
    generateStrategy,
    loading: journeyLoading,
    updateJourneyPhase,
    greetingPreference
  } = useJourney();
  const { 
    enhanceConversation, 
    getConversationInsights, 
    emotionalContext,
    conversationState 
  } = useAdvancedConversation();

  const content = {
    ar: {
      masterAgent: 'ŸÖŸàÿ±ŸÅŸà ÿßŸÑÿ∞ŸÉŸä',
      connecting: 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿßÿ™ÿµÿßŸÑ...',
      connected: 'ŸÖÿ™ÿµŸÑ',
      thinking: 'ŸÖŸàÿ±ŸÅŸà ŸäŸÅŸÉÿ±...',
      placeholder: 'ÿßŸÉÿ™ÿ® ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ŸáŸÜÿß...'
    },
    en: {
      masterAgent: 'Morvo AI',
      connecting: 'Connecting...',
      connected: 'Connected',
      thinking: 'Morvo is thinking...',
      placeholder: 'Type your message here...'
    }
  };

  const t = content[language];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Initialize chat with journey-aware welcome message
  useEffect(() => {
    const initializeChat = async () => {
      if (chatInitialized || journeyLoading || !user) {
        return;
      }

      try {
        console.log('üöÄ Initializing journey-aware chat...');
        const isHealthy = await MorvoAIService.testConnection();
        setIsConnected(isHealthy);
        
        if (messages.length === 0) {
          let welcomeContent: string;
          
          if (isOnboardingComplete) {
            const greeting = greetingPreference || journeyStatus?.greeting_preference || 'ÿ£ÿ≥ÿ™ÿßÿ∞';
            welcomeContent = `ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ${greeting}! üéØ ÿ£ŸÜÿß ŸÖŸàÿ±ŸÅŸàÿå ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ∞ŸÉŸä ŸÑŸÑÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑÿ±ŸÇŸÖŸä. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü`;
          } else {
            // Journey-based welcome messages
            switch (currentPhase) {
              case 'welcome':
                welcomeContent = 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ŸÖŸàÿ±ŸÅŸà! üöÄ ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ∞ŸÉŸä ŸÑŸÑÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑÿ±ŸÇŸÖŸä. ÿØÿπŸÜŸä ÿ£ÿ™ÿπÿ±ŸÅ ÿπŸÑŸäŸÉ ÿ£ŸàŸÑÿßŸã - ŸÉŸäŸÅ ÿ™ŸÅÿ∂ŸÑ ÿ£ŸÜ ÿ£ŸÜÿßÿØŸäŸÉÿü (ŸÖÿ´ÿßŸÑ: ÿ£ÿ≥ÿ™ÿßÿ∞ ÿ£ÿ≠ŸÖÿØÿå ÿØŸÉÿ™Ÿàÿ± ÿ≥ÿßÿ±ÿ©)';
                break;
              case 'greeting_preference':
                welcomeContent = 'ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã! ŸÉŸäŸÅ ÿ™ÿ≠ÿ® ÿ£ŸÜ ÿ£ŸÜÿßÿØŸäŸÉÿü ŸäŸÖŸÉŸÜŸÉ ÿ£ŸÜ ÿ™ŸÇŸàŸÑ ŸÑŸä ŸÖÿ´ŸÑÿßŸã: ÿ£ÿ≥ÿ™ÿßÿ∞ ÿ£ÿ≠ŸÖÿØÿå ÿØŸÉÿ™Ÿàÿ± ÿ≥ÿßÿ±ÿ©ÿå ŸÖŸáŸÜÿØÿ≥ ŸÖÿ≠ŸÖÿØÿå ÿ£Ÿà ÿ£Ÿä ÿ∑ÿ±ŸäŸÇÿ© ÿ™ŸÅÿ∂ŸÑŸáÿß.';
                break;
              case 'website_analysis':
                const savedGreeting = greetingPreference || 'ÿ£ÿ≥ÿ™ÿßÿ∞';
                welcomeContent = `ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ${savedGreeting}! ÿßŸÑÿ¢ŸÜ ÿ£ÿ≠ÿ™ÿßÿ¨ ŸÑÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÑÿ£ŸÅŸáŸÖ ŸÜÿ¥ÿßÿ∑ŸÉ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿä ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ. Ÿäÿ±ÿ¨Ÿâ ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ÿßÿ®ÿ∑ ŸÖŸàŸÇÿπŸÉ ŸÖÿπŸä.`;
                break;
              case 'profile_completion':
                welcomeContent = 'ÿ±ÿßÿ¶ÿπ! ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸàŸÇÿπŸÉÿå ŸÑÿØŸä ŸÅŸáŸÖ ÿ£ŸàŸÑŸä ÿπŸÜ ŸÜÿ¥ÿßÿ∑ŸÉ. ÿßŸÑÿ¢ŸÜ ÿØÿπŸÜŸä ÿ£ÿ¨ŸÖÿπ ÿ®ÿπÿ∂ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ© ŸÑÿ£ÿ®ŸÜŸä ŸÑŸÉ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ™ÿ≥ŸàŸäŸÇŸäÿ© ŸÖÿÆÿµÿµÿ©.';
                break;
              default:
                welcomeContent = 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ! ÿØÿπŸÜÿß ŸÜŸÉŸÖŸÑ ÿ±ÿ≠ŸÑÿ™ŸÉ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ© ŸÖŸÜ ÿ≠Ÿäÿ´ ÿ™ŸàŸÇŸÅŸÜÿß.';
            }
          }

          const welcomeMessage: MessageData = {
            id: Date.now().toString(),
            content: welcomeContent,
            sender: 'agent',
            timestamp: new Date(),
            isOnboarding: !isOnboardingComplete,
            journeyPhase: currentPhase,
            emotionalContext: emotionalContext
          };
          
          setMessages([welcomeMessage]);
          console.log('‚úÖ Journey-aware chat initialized - Phase:', currentPhase);
        }
      } catch (error) {
        console.error('‚ùå Journey chat initialization failed:', error);
        setIsConnected(false);
        
        // Fallback welcome message
        if (messages.length === 0) {
          const fallbackMessage: MessageData = {
            id: Date.now().toString(),
            content: 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ŸÖŸàÿ±ŸÅŸà! ÿ£ÿπŸÖŸÑ ÿ≠ÿßŸÑŸäÿßŸã ŸÅŸä Ÿàÿ∂ÿπ ŸÖÿ≠ÿØŸàÿØ. ÿ≥ÿ£ÿ≠ÿßŸàŸÑ ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÇÿØÿ± ÿßŸÑÿ•ŸÖŸÉÿßŸÜ.',
            sender: 'agent',
            timestamp: new Date(),
          };
          setMessages([fallbackMessage]);
        }
      } finally {
        setConnectionChecked(true);
        setChatInitialized(true);
      }
    };

    initializeChat();
  }, [user, isOnboardingComplete, currentPhase, journeyStatus, messages.length, emotionalContext, chatInitialized, journeyLoading, greetingPreference]);

  // Enhanced content type change handler for sidebar integration
  const handleSidebarContentChange = (message: string) => {
    if (onContentTypeChange) {
      // Detect intent from message and trigger appropriate sidebar content
      const lowerMessage = message.toLowerCase();
      
      if (lowerMessage.includes('ÿ™ÿ≠ŸÑŸäŸÑ') || lowerMessage.includes('analytics') || lowerMessage.includes('ÿ•ÿ≠ÿµÿßÿ¶Ÿä')) {
        onContentTypeChange('analytics');
      } else if (lowerMessage.includes('ŸÖÿ≠ÿ™ŸàŸâ') || lowerMessage.includes('content') || lowerMessage.includes('ŸÖŸÜÿ¥Ÿàÿ±')) {
        onContentTypeChange('content-creator');
      } else if (lowerMessage.includes('ÿ≠ŸÖŸÑÿ©') || lowerMessage.includes('campaign') || lowerMessage.includes('ÿ•ÿπŸÑÿßŸÜ')) {
        onContentTypeChange('campaign');
      } else if (lowerMessage.includes('ÿ¨ÿØŸàŸÑÿ©') || lowerMessage.includes('calendar') || lowerMessage.includes('ŸÖŸàÿπÿØ')) {
        onContentTypeChange('calendar');
      } else if (lowerMessage.includes('ÿ±ÿ≥ŸÖ') || lowerMessage.includes('chart') || lowerMessage.includes('ÿ®ŸäÿßŸÜŸä')) {
        onContentTypeChange('chart');
      } else if (lowerMessage.includes('ÿÆÿ∑ÿ©') || lowerMessage.includes('plan') || lowerMessage.includes('ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ©')) {
        onContentTypeChange('plan');
      }
    }
  };

  const handleSendMessage = async () => {
    if (!input.trim() || !user) {
      return;
    }

    const userMessage: MessageData = {
      id: Date.now().toString(),
      content: input,
      sender: 'user',
      timestamp: new Date(),
      journeyPhase: currentPhase
    };

    setMessages(prev => [...prev, userMessage]);
    const messageText = input;
    setInput('');
    setIsLoading(true);

    // Update sidebar content based on user message
    handleSidebarContentChange(messageText);

    try {
      console.log('ü§ñ Processing journey-aware message - Phase:', currentPhase);
      
      // Handle journey-specific logic
      let journeyResponse = await handleJourneySpecificMessage(messageText);
      
      if (!journeyResponse) {
        // Prepare context for backend with journey information
        const context = {
          conversation_history: messages.slice(-3).map(m => ({
            role: m.sender === 'user' ? 'user' : 'assistant',
            content: m.content
          })),
          journey_context: {
            journey_id: journey?.journey_id,
            current_phase: currentPhase,
            is_onboarding_complete: isOnboardingComplete,
            profile_progress: journeyStatus?.profile_progress || 0,
            greeting_preference: greetingPreference
          },
          emotional_context: emotionalContext,
          conversation_state: conversationState,
          user_id: user.id
        };

        let backendResponse;

        // Try Railway backend first
        if (isConnected) {
          try {
            const aiResponse = await MorvoAIService.processMessage(messageText, context);
            backendResponse = aiResponse.response;
            console.log('‚úÖ Journey-aware backend response received');
          } catch (backendError) {
            console.warn('‚ö†Ô∏è Backend failed, using local processing:', backendError);
            backendResponse = null;
          }
        }

        // Fallback to local processing
        if (!backendResponse) {
          console.log('üîÑ Using local journey-aware response generation...');
          backendResponse = generateJourneyAwareResponse(messageText);
        }

        journeyResponse = backendResponse;
      }

      // Enhance with conversational intelligence
      const enhancement = await enhanceConversation(messageText, journeyResponse);
      
      const botMessage: MessageData = {
        id: (Date.now() + 1).toString(),
        content: enhancement.personalizedResponse,
        sender: 'agent',
        timestamp: new Date(),
        processing_time: Date.now() - userMessage.timestamp.getTime(),
        isOnboarding: !isOnboardingComplete,
        journeyPhase: currentPhase,
        contextualInsights: enhancement.contextualInsights,
        emotionalContext: emotionalContext
      };

      setMessages(prev => [...prev, botMessage]);

      // Handle content type changes based on message content
      if (onContentTypeChange) {
        if (messageText.includes('ÿ™ÿ≠ŸÑŸäŸÑ') || messageText.includes('analytics')) {
          onContentTypeChange('analytics');
        } else if (messageText.includes('ŸÖÿ≠ÿ™ŸàŸâ') || messageText.includes('content')) {
          onContentTypeChange('content-creator');
        } else if (messageText.includes('ÿ≠ŸÖŸÑÿ©') || messageText.includes('campaign')) {
          onContentTypeChange('campaign');
        } else if (messageText.includes('ÿ¨ÿØŸàŸÑÿ©') || messageText.includes('calendar')) {
          onContentTypeChange('calendar');
        }
      }

    } catch (error) {
      console.error('‚ùå Journey chat error:', error);
      
      const errorMessage: MessageData = {
        id: (Date.now() + 1).toString(),
        content: language === 'ar' 
          ? 'ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿ±ÿ≥ÿßŸÑÿ™ŸÉ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.'
          : 'Sorry, there was an error processing your message. Please try again.',
        sender: 'agent',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, errorMessage]);

      toast({
        title: language === 'ar' ? 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸÖÿπÿßŸÑÿ¨ÿ©' : 'Processing Error',
        description: language === 'ar' 
          ? 'ÿ™ÿπÿ∞ÿ± ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.'
          : 'Unable to process message. Please try again.',
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle journey-specific message processing
  const handleJourneySpecificMessage = async (message: string): Promise<string | null> => {
    if (isOnboardingComplete) return null;

    const cleanMessage = message.trim();

    switch (currentPhase) {
      case 'welcome':
      case 'greeting_preference':
        if (cleanMessage) {
          console.log('üîÑ Saving greeting preference:', cleanMessage);
          const success = await setGreeting(cleanMessage);
          if (success) {
            console.log('‚úÖ Greeting saved successfully, transitioning to website analysis');
            // Update local phase immediately to prevent re-prompting
            updateJourneyPhase('website_analysis');
            return `ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉ! ÿ≥ÿ£ŸÜÿßÿØŸäŸÉ ${cleanMessage} ŸÖŸÜ ÿßŸÑÿ¢ŸÜ ŸÅÿµÿßÿπÿØÿßŸã.

ÿßŸÑÿ¢ŸÜÿå ŸÑÿ£ÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿ™ŸÇÿØŸäŸÖ ÿ£ŸÅÿ∂ŸÑ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ™ÿ≥ŸàŸäŸÇŸäÿ© ŸÑŸÉÿå ÿ£ÿ≠ÿ™ÿßÿ¨ ŸÑÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿ£Ÿà ŸÜÿ¥ÿßÿ∑ŸÉ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿä.

Ÿäÿ±ÿ¨Ÿâ ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ÿßÿ®ÿ∑ ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÖÿπŸä.`;
          } else {
            return `ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÅŸä ÿ≠ŸÅÿ∏ ÿ™ŸÅÿ∂ŸäŸÑÿßÿ™ŸÉ. ÿØÿπŸÜŸä ÿ£ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ. ŸÉŸäŸÅ ÿ™ŸÅÿ∂ŸÑ ÿ£ŸÜ ÿ£ŸÜÿßÿØŸäŸÉÿü`;
          }
        }
        break;

      case 'website_analysis':
        if (cleanMessage.includes('http') || cleanMessage.includes('www') || cleanMessage.includes('.com') || cleanMessage.includes('.sa')) {
          const url = extractUrlFromMessage(cleanMessage);
          if (url) {
            console.log('üîÑ Starting website analysis for:', url);
            const success = await analyzeWebsite(url);
            if (success) {
              updateJourneyPhase('analysis_review');
              return `ŸÖŸÖÿ™ÿßÿ≤! ÿ®ÿØÿ£ÿ™ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸàŸÇÿπŸÉ ${url} ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑŸÖÿ™ŸÇÿØŸÖ. 

ÿ≥ÿ£ŸÇŸàŸÖ ÿ®ÿ™ÿ≠ŸÑŸäŸÑ:
‚Ä¢ ŸáŸäŸÉŸÑ ÿßŸÑŸÖŸàŸÇÿπ ŸàÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
‚Ä¢ ÿßŸÑŸÉŸÑŸÖÿßÿ™ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©  
‚Ä¢ ŸÜŸÇÿßÿ∑ ÿßŸÑŸÇŸàÿ© ŸàÿßŸÑÿ∂ÿπŸÅ
‚Ä¢ ÿßŸÑŸÅÿ±ÿµ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ© ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©

ÿ≥Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿ®ÿ∂ÿπ ÿØŸÇÿßÿ¶ŸÇ. ŸÅŸä ÿ∫ÿ∂ŸàŸÜ ÿ∞ŸÑŸÉÿå ÿØÿπŸÜŸä ÿ£ÿ≥ÿ£ŸÑŸÉ ÿ®ÿπÿ∂ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ© ŸÑÿ£ÿ®ŸÜŸä ŸÑŸÉ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ¥ÿßŸÖŸÑÿ©.

ŸÖÿß ŸáŸà ŸáÿØŸÅŸÉ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä ŸÖŸÜ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑÿ±ŸÇŸÖŸäÿü
ÿ£) ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸàÿπŸä ÿ®ÿßŸÑÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©
ÿ®) ÿ™ŸàŸÑŸäÿØ ÿπŸÖŸÑÿßÿ° ŸÖÿ≠ÿ™ŸÖŸÑŸäŸÜ ÿ¨ÿØÿØ
ÿ¨) ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ±ÿ©
ÿØ) ÿ™ÿ≠ÿ≥ŸäŸÜ ÿÆÿØŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°`;
            }
          }
        }
        return `Ÿäÿ±ÿ¨Ÿâ ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿ±ÿßÿ®ÿ∑ ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÖÿπŸä ŸÑÿ£ÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿ™ÿ≠ŸÑŸäŸÑŸá. ŸÖÿ´ÿßŸÑ: https://example.com`;

      case 'analysis_review':
      case 'profile_completion':
        // Handle profile questions
        if (cleanMessage) {
          console.log('üîÑ Saving profile answer:', cleanMessage);
          const success = await saveAnswer('primary_goal', cleanMessage);
          if (success) {
            updateJourneyPhase('professional_analysis');
            return `ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉ ÿπŸÑŸâ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿπŸÑŸàŸÖÿ© ÿßŸÑŸÖŸáŸÖÿ©!

ÿ≥ÿ§ÿßŸÑ ÿ¢ÿÆÿ±: ŸÖÿß ŸáŸä ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ© ÿßŸÑŸÖÿÆÿµÿµÿ© ŸÑŸÑÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑÿ±ŸÇŸÖŸäÿü
ÿ£) ÿ£ŸÇŸÑ ŸÖŸÜ 5,000 ÿ±ŸäÿßŸÑ
ÿ®) 5,000 - 15,000 ÿ±ŸäÿßŸÑ  
ÿ¨) 15,000 - 50,000 ÿ±ŸäÿßŸÑ
ÿØ) ÿ£ŸÉÿ´ÿ± ŸÖŸÜ 50,000 ÿ±ŸäÿßŸÑ`;
          }
        }
        break;

      case 'professional_analysis':
        if (cleanMessage) {
          const success = await saveAnswer('marketing_budget', cleanMessage);
          if (success) {
            updateJourneyPhase('strategy_generation');
            return `ŸÖŸÖÿ™ÿßÿ≤! ÿßŸÑÿ¢ŸÜ ŸÑÿØŸä ŸÅŸáŸÖ ÿ¥ÿßŸÖŸÑ ÿπŸÜ ŸÜÿ¥ÿßÿ∑ŸÉ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿä Ÿàÿ£ŸáÿØÿßŸÅŸÉ.

ÿ≥ÿ£ÿ®ÿØÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ™ÿ≥ŸàŸäŸÇŸäÿ© ŸÖÿÆÿµÿµÿ© ŸÑŸÉ ÿ™ÿ™ÿ∂ŸÖŸÜ:
‚Ä¢ ÿÆÿ∑ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ©
‚Ä¢ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑÿ≥ŸäŸà ÿßŸÑŸÖÿ≠ŸÑŸä
‚Ä¢ ÿ≠ŸÖŸÑÿßÿ™ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ ÿßŸÑŸÖÿØŸÅŸàÿπÿ©
‚Ä¢ ÿ¨ÿØŸàŸÑÿ© ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™

ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ®ÿØÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑÿ¢ŸÜÿü`;
          }
        }
        break;

      case 'strategy_generation':
        if (cleanMessage.includes('ŸÜÿπŸÖ') || cleanMessage.includes('ÿßÿ®ÿØÿ£') || cleanMessage.includes('ŸÖŸàÿßŸÅŸÇ')) {
          const strategy = await generateStrategy();
          if (strategy) {
            updateJourneyPhase('commitment_activation');
            return `üéØ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ™ŸÉ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ© ÿßŸÑŸÖÿÆÿµÿµÿ© ÿ®ŸÜÿ¨ÿßÿ≠!

ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ™ŸÉ ÿ™ÿ™ÿ∂ŸÖŸÜ:
‚úÖ ÿÆÿ∑ÿ© ŸÖÿ≠ÿ™ŸàŸâ ÿ¥Ÿáÿ±Ÿäÿ© ŸÖÿØÿ±Ÿàÿ≥ÿ©
‚úÖ ŸÉŸÑŸÖÿßÿ™ ŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ŸÖÿ≠ŸÑŸäÿ© ŸÖÿ≥ÿ™ŸáÿØŸÅÿ©  
‚úÖ ÿ¨ÿØŸàŸÑÿ© ŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™ ÿ£ÿ≥ÿ®ŸàÿπŸäÿ©
‚úÖ ÿ≠ŸÖŸÑÿßÿ™ ÿ•ÿπŸÑÿßŸÜŸäÿ© ŸÖÿ≠ÿ≥ŸÜÿ©
‚úÖ ÿ™ŸÇÿßÿ±Ÿäÿ± ÿ£ÿØÿßÿ° ÿ¥Ÿáÿ±Ÿäÿ©

ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ≥ÿ™ÿπÿØ ŸÑŸÑÿßŸÑÿ™ÿ≤ÿßŸÖ ÿ®ÿ™ŸÜŸÅŸäÿ∞ Ÿáÿ∞Ÿá ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ©ÿü`;
          }
        }
        break;
    }

    return null;
  };

  const generateJourneyAwareResponse = (message: string): string => {
    // Journey-aware local response generation
    if (!isOnboardingComplete) {
      switch (currentPhase) {
        case 'welcome':
        case 'greeting_preference':
          return 'ÿ£ŸáŸÑÿßŸã ÿ®ŸÉ! ŸÉŸäŸÅ ÿ™ŸÅÿ∂ŸÑ ÿ£ŸÜ ÿ£ŸÜÿßÿØŸäŸÉÿü ŸäŸÖŸÉŸÜŸÉ ÿ£ŸÜ ÿ™ŸÇŸàŸÑ ŸÑŸä ÿßÿ≥ŸÖŸÉ ÿ£Ÿà ŸÉŸäŸÅ ÿ™ÿ≠ÿ® ÿ£ŸÜ ÿ£ÿÆÿßÿ∑ÿ®ŸÉ.';
        case 'website_analysis':
          return 'ŸÑÿ£ÿ™ŸÖŸÉŸÜ ŸÖŸÜ ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑÿå ÿ£ÿ≠ÿ™ÿßÿ¨ ŸÑÿ±ÿßÿ®ÿ∑ ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÑÿ™ÿ≠ŸÑŸäŸÑŸá.';
        default:
          return 'ÿØÿπŸÜÿß ŸÜŸÉŸÖŸÑ ÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ•ÿπÿØÿßÿØ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ ŸÑÿ£ÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿ™ŸÇÿØŸäŸÖ ÿ£ŸÅÿ∂ŸÑ ÿÆÿØŸÖÿ© ŸÑŸÉ.';
      }
    }

    return SmartResponseGenerator.generateContextualResponse(message, [], journeyStatus);
  };

  const extractUrlFromMessage = (message: string): string | null => {
    const urlRegex = /(https?:\/\/[^\s]+)|(www\.[^\s]+)|([a-zA-Z0-9-]+\.[a-zA-Z]{2,})/g;
    const matches = message.match(urlRegex);
    if (matches && matches.length > 0) {
      let url = matches[0];
      if (!url.startsWith('http')) {
        url = 'https://' + url;
      }
      return url;
    }
    return null;
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleActionClick = (action: string, prompt: string) => {
    setInput(prompt);
    if (onContentTypeChange) {
      onContentTypeChange(action);
    }
  };

  const handleCommandResponse = (response: AgentResponse) => {
    console.log('Agent command response:', response);
  };

  return (
    <div className="h-full flex flex-col bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800" dir={isRTL ? 'rtl' : 'ltr'}>
      <ChatHeader 
        theme={theme}
        isRTL={isRTL}
        content={{
          masterAgent: t.masterAgent,
          clientAgent: '',
          connecting: t.connecting,
          connected: t.connected
        }}
        isConnecting={!connectionChecked}
        clientId={user?.id || ''}
        onToggleTheme={() => {}}
      />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        <MessageList 
          messages={messages}
          isLoading={isLoading}
          theme={theme}
          isRTL={isRTL}
          thinkingText={t.thinking}
          onCommandResponse={handleCommandResponse}
          language={language}
          onActionClick={handleActionClick}
        />
        
        <div className="border-t border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm">
          <div className="p-4">
            {messages.length > 0 && messages[messages.length - 1]?.suggested_actions && (
              <div className="mb-3">
                <ActionButtons 
                  messageContent={messages[messages.length - 1]?.content || ''}
                  language={language}
                  theme={theme}
                  isRTL={isRTL}
                  onActionClick={handleActionClick}
                />
              </div>
            )}
            
            <ChatInput
              input={input}
              isLoading={isLoading}
              theme={theme}
              isRTL={isRTL}
              placeholder={t.placeholder}
              onInputChange={setInput}
              onSend={handleSendMessage}
              onKeyPress={handleKeyPress}
              hasTokens={true}
            />
          </div>
        </div>
      </div>
      <div ref={messagesEndRef} />
    </div>
  );
};
